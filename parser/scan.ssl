% PT Scanner Version 5.0
%
% Date:  30 Jun 1980
%       (Revised v5.0 - 10 Dec 2020)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%     It removes token separators - blanks, tabs, comments.  The
%     scanner detects these lexical errors:  unclosed comments,
%     unclosed literals, literals that cross a line boundary,
%     illegal characters and integers followed by identifiers with 
%     no separator between them.

Input : 
        lLetter 
        firstCharClass = lLetter 
        lDigit
        lPlus           '+'
        lMinus          '-'
        lStar           '*'
        lColon          ':'
        lEquals         '='
        lDot            '.'
        lComma          ','
        lSemicolon      ';'
        lQuote          '"'
        lBackslash
        lLeftAngle      '<'
        lRightAngle     '>'
        lLeftParen      '('
        lRightParen     ')'
        lLeftBracket    '['
        lRightBracket   ']'
        lLeftBrace      '{'
        lRightBrace     '}'
        % new Like input tokens
        lSlash          '/'
        lPercent        '%'
        lHash           '#'
        lBang           '!'
        lOrBar          '|'
        % end of new like input tokens
        lBlank
        lIllegal
        lNewLine
        lCarriageReturn
        lTab
        lNewPage 
        lEndFile
        lastCharClass = lEndFile;

Output :
        % Keyword tokens -
        %   Tokens pDiv through pRepeat are keywords which will be 
        %   separated from user defined identifiers by the Screener.
        %   This Scanner treats them all as identifiers.
        % pDiv old PT keyword 
        % pMod old PT keyword
        pOr
        firstKeywordToken = pOr
        pAnd
        pNot
        pThen
        pElse
        pOf
        pEnd
        % pUntil old PT keyword
        % pDo old PT keyword
        % pArray old PT keyword
        pFile
        % pProgram old PT keyword
        % pConst old PT keyword
        pVar
        % pType old PT keyword
        % pProcedure old PT keyword
        % pBegin old PT keyword
        pIf
        % pCase old PT keyword
        pWhile
        pRepeat

        % new like keywords
        pChoose
        pElseIf
        pFun
        pIs
        pLike
        pPkg
        pPublic
        pUsing
        pVal
        pWhen

        lastKeywordToken = pWhen

        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pAlmostEndFile % used for exiting before EOF; avoids S/SL error
        pEndFile
        pPlus
        pMinus
        pStar
        % pColonEquals old PT token
        pDot
        pComma
        pSemicolon
        pColon
        pEquals
        pNotEqual
        pLess
        pLessEqual
        pGreaterEqual
        pGreater
        pLeftParen
        pRightParen
        pLeftBracket
        pRightBracket
        % new like tokens
        pSlash
        pPercent
        pHash
        pBang
        pOrBar
        pDoubleOrBar
        pPlusEquals
        pMinusEquals
        pStarEquals
        pSlashEquals
        pPercentEquals
        pDoubleEquals
        % from both like and PT
        pDotDot


        lastSyntaxToken = pDotDot;


Error :
        eIllegalChar = 5
        firstScanError = eIllegalChar
        eStringLiteralLine
        eStringLiteralEOF
        eCommentEOF
        eNoSeparator
        lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
        % Save the character form of the last accepted lexical token.


rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
        {[
            | lBlank :
            | lLetter:
                oBufferSave
                @Identifier
            | lNewLine:
                .pNewLine
            | lCarriageReturn:
                % from Windows files, ignore
            | lTab:
            | ';':
                .pSemicolon
            | '(':
				.pLeftParen
            | ')':
                .pRightParen
            | '[':
                .pLeftBracket
            | ']':
                .pRightBracket
            | ',':
                .pComma
            | ':':
                .pColon
            | lDigit:
                oBufferSave
                @Integer
                [
                    | lLetter:
                        #eNoSeparator
                        oBufferSave
                        @Identifier
                    | *:
                ]
            | '=':
                [
                    | '=':
                        .pDoubleEquals
                    | *:
                        .pEquals
                ]
            | '+':
                [
                    | '=':
                        .pPlusEquals
                    | *:
                        .pPlus
                ]
            | lQuote:
                @StringLiteral
            | '-':
                [
                    | '=':
                        .pMinusEquals
                    | *:
                        .pMinus
                ]
            | '.':
                [
                    | '.':
                        .pDotDot
                    | *:
                        .pDot
                ]
            | '<':
                [
                    | '>':
                        .pNotEqual
                    | '=':
                        .pLessEqual
                    | *:
                        .pLess
                ]
            | '>':
                [
                    | '=':
                        .pGreaterEqual
                    | *:
                        .pGreater
                ]
            | '/':
		[
		    | '/':
			@Comment
		    | '*':
			@AlternateComment
		    | '=':
			.pSlashEquals
                    | *:
                        .pSlash
				]
            | '*':
                [
                    | '=':
                        .pStarEquals
                    | *:
                        .pStar
                ]
            | '%':
                [
                    | '=':
                        .pPercentEquals
                    | *:
                        .pPercent
                ]
            | '#':
                .pHash
            | '!':
                .pBang
            | '|':
                [
                    | '|':
                        .pDoubleOrBar
                    | *:
                        .pOrBar
                ]
            | lNewPage:
            | lEndFile:
                .pAlmostEndFile
                .pEndFile
                >
            | *:
                ?
                #eIllegalChar
        ]};

Identifier :
        % Assemble an identifier token

        {[
            | lLetter, lDigit:
                oBufferSave
            | *:
                .pIdentifier
                >
        ]};

Integer :
        % Assemble an integer token

        {[
            | lDigit:
                oBufferSave
            | *:
                .pInteger
                >
        ]};

StringLiteral :
        % Assemble a literal string token

        {[
			% Doesn't this already support null strings 
			% Input sequence (lQuote, lQuote, *) would give output of null string?
            | lQuote:
                [
					% Pascal allows strings to have quotes in them by using double quotes
					% Example: Writeln('I''m here'); //prints: I'm here
                    | lQuote:
                        oBufferSave
                    | *:
                        .pStringLiteral
                        >
                ]
            | lNewLine:         % literal must not cross a line boundary
                #eStringLiteralLine
                .pNewLine
                >
            | lEndFile:         % literal must be closed before EOF
                #eStringLiteralEOF
                .pEndFile
                >
            | *:        % literal may contain any other character
                [
                    | lBackslash:
                        oBufferSave
                    | *:
                ]
                ?
                oBufferSave
        ]};

Comment :
        % Discard the contents of a comment

        {[
            | lNewLine:
                >
            | lEndFile:         % comment must be closed before EOF
                #eCommentEOF
                .pEndFile
                >
            | *:        % comment may contain any other character
                ?
        ]};

AlternateComment :
        {[
            | '*':
                [
                    | '/':
                        >
                    | *:
                ]
            | lNewLine:
                .pNewLine
            | lEndFile:
                #eCommentEOF
                .pEndFile
                >
            | *:
                ?
        ]};

end
