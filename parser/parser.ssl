%  PT Parser Version 5.0
%
% Date:  30 Jun 1980
%        (Revised v5.0 - 10 Dec 2020)
%
% Author:  Alan Rosselet
%
% Abstract
%     This module parses the syntax token stream emitted by the scanner
%     and emits a postfix stream of tokens to the semantic analyzer
%     module.  The parser detects and repairs syntax errors so that the
%     token stream emitted to the semantic analyzer is syntactically
%     legal (except for the special case of declaration phase errors - 
%     see the comment in the Block routine below).

Input :
        % Keywords must be first both here and in stdIdentifiers,
        % and they must appear in the exact same order

        pOr 'or'
        firstKeywordToken = pOr
        pAnd 'and'
        pNot 'not'
        pThen 'then'
        pElse 'else'
        pOf 'of'
        pEnd 'end'
        % pUntil old PT keyword
        % pDo old PT keyword
        % pArray old PT keyword
        pFile 'file'
        % pProgram old PT keyword
        % pConst old PT keyword
        pVar 'var'
        % pType old PT keyword
        % pProcedure old PT keyword
        % pBegin old PT keyword
        pIf 'if'
        % pCase old PT keyword
        pWhile 'while'
        pRepeat 'repeat'

        % new like keywords
        pChoose 'choose'
        pElseIf 'elseif'
        pFun 'fun'
        pIs 'is'
        pLike 'like'
        pPkg 'pkg'
        pPublic 'public'
        pUsing 'using'
        pVal 'val'
        pWhen 'when'

        lastKeywordToken = pWhen
        % Scanner tokens -
        %   These are the tokens actually recognized by the Scanner itself.

        % Compound tokens - 
        %   These will be sent to the parser with a value or index.
        pIdentifier 
        firstCompoundInputToken = pIdentifier
        pInteger
        pStringLiteral
        lastCompoundInputToken = pStringLiteral

        % Non-compound tokens - 
        %   These tokens simply represent themselves.
        pNewLine
        pAlmostEndFile
        pEndFile
        pPlus                   '+'
        pMinus                  '-'
        pStar                   '*'
        % pColonEquals            ':='
        pDot                    '.'
        pComma                  ','
        pSemicolon              ';'
        pColon                  ':'
        pEquals                 '='
        pNotEqual               '<>'
        pLess                   '<'
        pLessEqual              '<='
        pGreaterEqual           '>='
        pGreater                '>'
        pLeftParen              '('
        pRightParen             ')'
        pLeftBracket            '['
        pRightBracket           ']'
        % new like tokens
        pSlash '/'
        pPercent '%'
        pHash '#'
        pBang '!'
        pOrBar '|'
        pDoubleOrBar '||'
        pPlusEquals '+='
        pMinusEquals '-='
        pStarEquals '*='
        pSlashEquals '/='
        pPercentEquals '%='
        pDoubleEquals '=='
        
        pDotDot '..'
        lastSyntaxToken = pDotDot;

Output :
        sIdentifier 
        firstSemanticToken = sIdentifier
        firstCompoundSemanticToken = sIdentifier
        sInteger
        sStringLiteral
        lastCompoundSemanticToken = sStringLiteral

        sProgram
        sParmBegin
        sParmEnd
        sConst
        % sType old PT token
        % new Like tokens
        sPackage
        sPublic
        sConcatenate
        sRepeatString
        sSubstring
        sLength
        sInitialValue
        sCaseElse
        sLike

        sVar
        sProcedure
        sBegin
        sEnd
        sNegate
        sArray
        sFile
        sRange
        sCaseStmt
        sCaseEnd
        sLabelEnd
        sExpnEnd
        sNullStmt
        sAssignmentStmt
        sSubscript
        sCallStmt
        sFieldWidth
        sIfStmt
        sThen
        sElse
        sWhileStmt
        sRepeatStmt
        sRepeatEnd
        sEq
        sNE
        sLT
        sLE
        sGT
        sGE
        sAdd
        sSubtract
        sMultiply
        sDivide
        sModulus
        sInfixOr
        sOr
        sInfixAnd
        sAnd
        sNot
        sNewLine

        sEndOfFile
        lastSemanticToken = sEndOfFile;

Error:
        eUnexpectedToken;

type ConsumeStatus:
        cConsumed
        cDidNotConsume;

rules

Program : 
        .sProgram
        @UsingStatement
        @Block
        ;
Block:
        .sBegin
        @DeclarationOrStatements
        .sEnd;

DeclarationOrStatement >> ConsumeStatus:
        [
            | pVal : @ConstantDefinitions
            | pVar : @VariableDeclaration
            | pIdentifier: @AssignmentOrCallStmtOrVariableDeclaration
            | pPkg: @Package
            | 'fun': @Procedure
            | 'public': @Public
            | pIf: @IfStatement
            | pRepeat: @RepeatStatement
            | pChoose: @ChooseStatement
            | *: >> cDidNotConsume
        ]
        >> cConsumed
        ;

DeclarationOrStatements:
        {[ @DeclarationOrStatement
            | cConsumed:
            | cDidNotConsume: >
        ]};

RepeatBlock: % inside of repeat block where 'while' is at bottom
        .sRepeatStmt
        .sBegin
        @DeclarationOrStatements
        'while'
        .sEnd .sRepeatEnd @Expression .sExpnEnd ';'
        ;

RepeatStatement: % follows 'repeat' keyword
        [
            | 'while': .sWhileStmt @Expression .sExpnEnd @Block
            | *: @RepeatBlock
        ];

IfBlock:
    .sBegin
    @DeclarationOrStatements
    [
        | 'end': ';' .sEnd
        | 'else': .sEnd .sElse @Block
        | 'elseif': .sEnd .sElse .sBegin @IfStatement .sEnd
    ];
    

IfStatement:
    .sIfStmt @Expression .sExpnEnd @then @IfBlock
    ;

% Rule that handles procedure declaration with parameters
Procedure:
    .sProcedure 
    @identifier @OptionalProcedureParameters 'is' .sParmEnd @Block;

% Rule that handles procedure declaration with optional public keyword 
PublicProcedure:
    .sProcedure 
    @identifier .sPublic @OptionalProcedureParameters 'is' .sParmEnd @Block;

Public:
    [
        | 'val':
            @PublicConstantDefinitions
        | 'var':
            @PublicVariableDeclaration
        | 'fun':
            @PublicProcedure
    ];

Package:
    .sPackage @identifier 'is' @Block;

AssignEqual:
        .sAssignmentStmt .sIdentifier 
        @Expression .sExpnEnd 
        ';';

AssignAdd:
        .sAssignmentStmt .sIdentifier .sIdentifier 
        @Expression .sAdd .sExpnEnd
        ';';

AssignSubtract:
        .sAssignmentStmt .sIdentifier .sIdentifier 
        @Expression .sSubtract .sExpnEnd
        ';';

AssignMultiply:
        .sAssignmentStmt .sIdentifier .sIdentifier 
        @Expression .sMultiply .sExpnEnd
        ';';

AssignDivide:
        .sAssignmentStmt .sIdentifier .sIdentifier 
        @Expression .sDivide .sExpnEnd
        ';';

AssignModulus:
        .sAssignmentStmt .sIdentifier .sIdentifier 
        @Expression .sModulus .sExpnEnd
        ';';

SubscriptAssign: % starts after '['
        .sAssignmentStmt .sIdentifier
        .sSubscript @Expression .sExpnEnd ']'
        '='
        @Expression .sExpnEnd ';'
        ;
    
AssignmentOrCallStmtOrVariableDeclaration: 
    [
        | '=': @AssignEqual
        | '+=': @AssignAdd
        | '-=': @AssignSubtract
        | '*=': @AssignMultiply
        | '/=': @AssignDivide
        | '%=': @AssignModulus
        | '[': @SubscriptAssign
        | '(': @CallStatement
        | ';': @CallStatementNoParams
        | *: #eUnexpectedToken
    ];

Arguments:
    {[
        | ')': >
        | ',': 
        | *: @ConstantValue
    ]};

CallStatementNoParams:
    .sCallStmt .sIdentifier .sParmEnd;

CallStatement: % starts after '('
    .sCallStmt .sIdentifier @Arguments .sExpnEnd .sParmEnd ';'
    ;

UsingStatement:
    pUsing @identifier
    {[
        | ',': @identifier
        | ';': >
        | *: #eUnexpectedToken
    ]}
    .sParmEnd
    ;


ConstantDefinition:
    .sConst @identifier '=' @ConstantValue;

PublicConstantDefinition:
    .sConst @identifier .sPublic '=' @ConstantValue;

PublicConstantDefinitions :
        @PublicConstantDefinition
        {[
            | ',': @PublicConstantDefinition % comma separates more definitions
            | ';': >
            | *: #eUnexpectedToken

        ]};

ConstantDefinitions :
        @ConstantDefinition
        {[
            | ',': @ConstantDefinition % comma separates more definitions
            | ';': >
            | *: #eUnexpectedToken
        ]};

ConstantValue :
        [
            | pInteger: .sInteger
            | pStringLiteral: .sStringLiteral
            | pIdentifier: .sIdentifier
            | '-': @UnsignedIntegerConstant .sNegate
            | '+': @UnsignedIntegerConstant
            | *: #eUnexpectedToken
        ];

UnsignedIntegerConstant :
        [
            | pIdentifier: .sIdentifier
            | pInteger: .sInteger
            | *: #eUnexpectedToken
        ];

OptionallySignedIntegerConstant :
        [
            | '-': @UnsignedIntegerConstant .sNegate
            | '+': @UnsignedIntegerConstant
            | *: @UnsignedIntegerConstant
        ];

VariableDeclaration :
        % Accept only one variable declaration
        .sVar @identifier @ValueorLike  ';';

PublicVariableDeclaration :
        % Accept only one variable declaration
        .sVar @identifier .sPublic @ValueorLike  ';';

ParameterIdentifier:
    [
        | 'var': @identifier .sVar
        | pIdentifier: .sIdentifier
        | *: #eUnexpectedToken
    ];

ParameterDeclaration:
    @ParameterIdentifier ':' @LikeClause;

ProcedureParameters:
    @ParameterDeclaration
    {[
        | ')': >
        | ',': @ParameterDeclaration
        | *: #eUnexpectedToken
    ]};

ValueorLike :
        [
            | '=': @Expression
            | '[': .sArray @ConstantValue ']' ':' @LikeClause
            | ':': @LikeClause
        ];

LikeClause:
    @OptionalFile @like @ConstantValue;

ChooseBlock :
    .sBegin
    {[
        | pVal : @ConstantDefinitions
        | pVar : @VariableDeclaration
        | pIdentifier: @AssignmentOrCallStmtOrVariableDeclaration
        | pPkg: @Package
        | 'fun': @Procedure
        | 'public': @Public
        | pIf: @IfStatement
        | pRepeat: @RepeatStatement
        | pChoose: @ChooseStatement
        | *:
            >
    ]}
    .sEnd;

ChooseStatement :
        .sCaseStmt
        @Expression
        .sExpnEnd
        'of'
        'when' @WhenStatement
        {[
            | 'when': @WhenStatement
            | *: >
        ]}
        .sCaseEnd
        [
            | 'else':
                .sCaseElse
                @ChooseBlock
            | *:
        ]
        'end' ';';

CommaSeparatedConstants:
        @OptionallySignedIntegerConstant
        {[
            | ',': @OptionallySignedIntegerConstant
            | *: >
        ]};

WhenStatement: % starts after 'when' in choose
        @CommaSeparatedConstants
        'then'
        .sLabelEnd
        % allow any number of declarations or statements
        @ChooseBlock;

% VERY SIMPLE RULES BELOW

% lowercase rules indicate simple passthroughs
identifier: pIdentifier .sIdentifier;
like: pLike .sLike;
then: pThen .sThen;

OptionalFile:
    [
        | 'file': .sFile
        | *: 
    ];


OptionalProcedureParameters:
    [
        | '(': @ProcedureParameters
        | *: 
    ];


Expression :
        @SimpleExpression
        [
            | '==':
                @SimpleExpression  .sEq
            | '<>':
                @SimpleExpression  .sNE
            | '<':
                @SimpleExpression  .sLT
            | '<=':
                @SimpleExpression  .sLE
            | '>':
                @SimpleExpression  .sGT
            | '>=':
                @SimpleExpression  .sGE
            | *:
        ];

SimpleExpression :
        [
            | '+':
                @Term
            | '-':
                @Term  .sNegate
            | *:
                @Term
        ]
        {[
            | '+':
                @Term  .sAdd
            | '-':
                @Term  .sSubtract
            | 'or':
                .sInfixOr  @Term  .sOr
        % Concatenate strings
        | '|':
        @Term .sConcatenate
        % Repeat strings
        | pDoubleOrBar:
         @Term .sRepeatString
        | *:
        >
        ]};

Term :
        @Factor
        {[
            | '*':
                @Factor  .sMultiply
            | '/':
                [
                    % First integer in Substring operation
                    | pInteger:
                        % First integer
                        .sInteger
                        [           
                            % Colon operator in Substring
                            | ':':
                            @Factor 
                            .sSubstring
                        % If colon doesn't appear do nornmal division
                            | *:
                            % Integer for divide is above
                            .sDivide
                        ]
                    % If not an integer then it cannot be substring so do normal division
                    | *:
                        @Factor .sDivide
                ]
            | '%':
                @Factor  .sModulus
            | 'and':
                .sInfixAnd  @Factor  .sAnd
            | *:
                >
        ]};

Factor :
        [
            | pIdentifier:
                .sIdentifier
                @IdentifierExtension
            | pInteger:
                .sInteger
            | '(':
                @Expression  ')'
            | 'not':
                @Factor
                .sNot
            | pStringLiteral:
                .sStringLiteral
            % Special character for the string length
            | pHash: 
                @Factor
                .sLength
            | 'file':
                .sFile '(' @Expression ')'
                .sExpnEnd
        ];
        
IdentifierExtension :
        % Handle subscripts and function actual parameter lists
        [
            | '[':
                .sSubscript
                @Expression  ']'
                .sExpnEnd
            | '(':
                .sParmBegin
                @Expression  ')'
                .sExpnEnd
                .sParmEnd
            | *:
        ];

end
