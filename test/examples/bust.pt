// Like example program
using input, output;

/* J.R. Cordy, Computer Systems Research Group, 
   University of Toronto, July 1975             
   For instructions on use, run once with no input. */

// hands of players                              
var handarray [7] : like 1;
var playershand : like handarray;
var dealershand : like handarray;
var playerscards : like 1;
var dealerscards : like 1;

// game counts for each shuffle 
var gamesplayed : like 1;
var gamesplayerwon : like 1;
var gamesdealerwon : like 1;

// player's hand values 
var dealerscount : like 1;
var playerscount : like 1;

// flags to indicate player"s status 
var dealerstops : like true;
var playerstops : like true;

// player parameters 
var playersname : like "Jim";

// player"s count limit for naive strategy 
var joenaivesguts : like 1;

// deck to deal cards from 
var deck [52] : like 1;
var nextcard : like 1;

// alphanumeric card names 
var cardnames [13] : like "A";

// random seed 
var seed : like 1;
var multiplier : like 1;


fun randint (var result : like 1, modulus : like 1) is
    // random number generation 
    if multiplier == 17 then
        multiplier = 19;
    else 
        multiplier = 17;
    end;
    seed = (seed * multiplier) % 10000;
    result = (seed % modulus) + 1;
end; //randint


fun shuffle is
    // puts a new shuffled deck of cards in the array "deck". 
    // cards are coded as 1 to 13, 1 being ace, 
    // 2-10 as they are, and 11-13 being j,q,k respectively. 

    var cardcount [13] : like 1;

    var c = 1;
    repeat
        cardcount [c] = 0;
        c += 1;
    while c <= 13;

    var ncards = 1;
    repeat
        var card : like 1;
        randint (card, 13);
        repeat while cardcount [card] == 4
            randint (card, 13);
        end;

        deck [ncards] = card;
        cardcount [card] = cardcount [card] + 1;

        ncards += 1;
    while ncards <= 52;

    nextcard = 0;
end; //shuffle

fun dealcard (var card : like 1) is
    nextcard += 1;
    card = deck [nextcard];
end; //dealcard

fun cardsleft (var number : like 1) is
    number = 52 - nextcard + 1;
end; //cardsleft


fun writehandimage (ncards : like 1, var hand : like handarray) is
    // print an image of the hand  
    var i = 1;
    repeat while i <= ncards
        put (" ", cardnames [hand [i]]);
        if hand[i] == 10 then
            put ("0");
        end;
        i += 1;
    end;
end; //writehandimage


fun writeplayersname is
    // print the player"s name 
    if playersname == "e" then
        put ("E.O. Thorp");
    elseif playersname == "j" then
        put ("Jim");
    else
        put ("Pooja");
    end;
end; //writeplayersname


fun somebodyplays (var r : like true) is
    // returns true if (there is another shuffle to   
    // be played (i.e. if (another player name is     
    // input), false otherwise initializes new shuffle                       

    gamesplayed = 0;
    gamesplayerwon = 0;
    gamesdealerwon = 0;

    putln; putln;
    put ("New shuffle."); putln;
    putln;
    put ("Choose a player (e for E.O.Thorp, j for Jim, p for Pooja, q to quit): ");
    get (playersname); getln; 

    if playersname == "q" then
        r = false;
    else
        if playersname != "e" then
            put ("What does s/he stand on? ");
            get (joenaivesguts); getln;
            repeat while (joenaivesguts <= 0) or (joenaivesguts > 21)
                put ("(1..20): ");
                get (joenaivesguts); getln;
            end;
        end;

        if playersname == "e" then
            putln;
            put ("E.O.Thorp plays this time."); putln;
        else 
            putln;
            put ("Next player is ");
            writeplayersname;
            put ("."); putln;
            put ("S/he stops at ", joenaivesguts:1, "."); putln;

            if joenaivesguts < 15 then
                put ("(What a hamburger!)"); putln;
            else
                put ("Good luck, ");
                writeplayersname;
                put ("."); putln;
            end;
        end;

        r = true;
    end;
end; //somebodyplays


fun playing (var r : like true) is
    // returns true if (enough cards left for        
    // another game, otherwise prints a shuffle      
    // summary and returns false.                    

    var numcards: like 1;
    cardsleft (numcards);

    if numcards > 10 then
        putln;
        put ("New game."); putln;
        gamesplayed = gamesplayed + 1;
        r = true;
    else 
        putln;
        put ("Too few cards left for another game."); putln;
        put ("Of ", gamesplayed:1, " games, ");
        writeplayersname;
        put (" won ", gamesplayerwon:1, ", dealer won ", gamesdealerwon:1, "."); putln;

        if gamesdealerwon > gamesplayerwon then
            put ("House cleans up on ");
            writeplayersname;
            put (" this time."); putln;
        elseif gamesplayerwon > gamesdealerwon then
            if playersname == "e" then
                put ("E.O.Thorp does it again."); putln;
            else 
                writeplayersname;
                put (" must have doctored the shuffle."); putln;
            end;
        else 
            put ("Even shuffle."); putln;
        end;

        r = false;
    end;
end; //playing


fun playertakesacard is
    // player"s hand gets another card from the top of the deck. 
    playerscards += 1;
    dealcard (playershand [playerscards]);
end; //playertakesacard


fun dealertakesacard is
    // dealer"s hand gets another card from the top  
    // of the deck.                                  
    dealerscards += 1;
    dealcard (dealershand [dealerscards]);
end;


fun deal is
    // initializes for a new hand and performs initial deal.                                 
    // player and dealer each get two cards.         

    playerstops = false;
    dealerstops = false;
    playerscards = 0;
    dealerscards = 0;

    playertakesacard;
    dealertakesacard;
    playertakesacard;
    dealertakesacard;

    put ("The initial deal gives ");
    writeplayersname;
    put (" :");
    writehandimage (playerscards, playershand); putln;
    put ("  and the dealer :"); 
    writehandimage (dealerscards, dealershand);
    put ("."); putln;
end; //deal


fun evaluate (ncards : like 1, var hand : like handarray,
              var softhand : like true, var value : like 1) is
    // evaluates the best count for the hand, and    
    // sets "softhand" to true if one or more aces are counted as 11.                            

    value = 0;
    var nacescounted11 = 0;

    var i = 1;
    repeat while i <= ncards
        choose hand [i] of
            when 2,3,4,5,6,7,8,9,10 then
                value += hand [i];
            when 1 then
                // A 
                value += 11;
                nacescounted11 = nacescounted11 + 1;
            else 
                // J,Q,K  
                value += 10;
        end;

        i += 1;
    end;

    repeat while (value > 21) and (nacescounted11 != 0)
        value -= 10;
        nacescounted11 -= 1;
    end;

    softhand = nacescounted11 > 0;
end; //evaluate


fun dealer is
    // simulates play of dealer.                         
    // dealer plays the standard strategy of             
    // standing with 17 or better.                       
    // when dealer decides to stop, prints hand summary. 

    var softhand : like true;

    evaluate (dealerscards, dealershand, softhand, dealerscount);

    if dealerscount > 21 then
        put ("Dealer goes bust."); putln;
        dealerstops = true;
        gamesplayerwon += 1;
    elseif dealerscount == 21 then
        put ("Dealer calls blackjack."); putln;
        dealerstops = true;
        gamesdealerwon += 1;
    else 
        if dealerscount < 17 then
            dealertakesacard;
        else 
            dealerstops = true;
        end;

        if dealerstops then
            put ("Dealer stands with ", dealerscount:1, "."); putln;

            if dealerscount > playerscount then
                put ("House wins."); putln;
                gamesdealerwon += 1;
            elseif dealerscount < playerscount then
                writeplayersname;
                put (" wins."); putln;
                gamesplayerwon += 1;
            else 
                put ("Tie game."); putln;
            end;

        else 
            put ("Dealer takes a card and now has ");
            writehandimage (dealerscards, dealershand); putln;
        end;
    end;
end; //dealer


fun playerjoenaive is
    // simulates the naive player strategy 
    if playerscount < joenaivesguts then
        playertakesacard;
    else 
        playerstops = true;
    end;
end; //playerjoenaive

fun playerthorp (softhand : like true) is
    // simulates a simplified version of the player       
    // strategy described by E.O.Thorp in his book        
    // "Beat the Dealer" (Vintage books, 1966) pp. 20,21. 

    var dealershows: like 1;
    dealershows = dealershand [1];

    if softhand then
        // soft hand strategy 
        if dealershows > 8 then
            // 9 or 10  
            playerstops = playerscount > 18;
        else 
            // 2-8,A  
            playerstops = playerscount > 17;
        end;
    else 
        // hard hand strategy  
        if (dealershows > 1) and (dealershows < 4) then
            // 2 or 3  
            playerstops = playerscount > 12;
        elseif (dealershows > 3) and (dealershows < 7) then
            // 4 to 6  
            playerstops = playerscount > 11;
        else 
            // 7 to 10,A  
            playerstops = playerscount > 16;
        end;
    end;

    if not playerstops then
        playertakesacard;
    end;
end; //playerthorpe


fun player is
    // simulates play of player                                
    // player plays either the naive strategy                  
    // or, if playersname == "E.O.Thorp", E.O.Thorp"s strategy. 

    var softhand : like true;

    evaluate (playerscards, playershand, softhand, playerscount);

    if playerscount == 21 then
        writeplayersname;
        put (" calls blackjack."); putln;
        playerstops = true;
        dealerstops = true;
        gamesplayerwon += 1;
    elseif playerscount > 21 then
        writeplayersname;
        put (" goes bust."); putln;
        playerstops = true;
        dealerstops = true;
        gamesdealerwon += 1;
    else 
        if playersname == "e" then
            playerthorp (softhand);
        else 
            playerjoenaive;
        end;
    end;

    if playerstops then
        writeplayersname;
        put (" stands with ", playerscount:1, "."); putln;
    else 
        writeplayersname;
        put (" takes a card and now has ");
        writehandimage (playerscards, playershand); putln;
    end;

end; //player


// main program  

// print program explanation 
put ("This program simulates the game of blackjack."); putln;
putln;
put ("The dealer plays the compulsory strategy of standing on 17 or better."); putln;
putln;
put ("The player plays either"); putln;
put ("  [1] The standard naive strategy of standing on n or better, or"); putln;
put ("  [2] A simplified version of the strategy described by  E.O.Thorp"); putln;
put ("      in his book ""Beat the Dealer"" (Vintage Books, 1966) pp. 20-21."); putln;
putln;
put ("Input :"); putln;
put ("  For each shuffle, a player name (character string of <= 20 characters),"); putln;
put ("  and if (the player name specified is not ""E.O.Thorp"", the count [n]"); putln;
put ("  on which the player stands."); putln;
putln;
put ("If the player name specified is ""E.O.Thorp"", the player strategy used", " will be Thorp""s.");
putln;
put ("Otherwise, the player will use the standard stop on count > n strategy."); putln;
putln;
put ("The program will simulate one complete shuffle of play for each player."); putln;

// initialize random seed 
seed = 13277;
multiplier = 17;

// initialize card names 
cardnames [1] = "A";
cardnames [2] = "2";
cardnames [3] = "3";
cardnames [4] = "4";
cardnames [5] = "5";
cardnames [6] = "6";
cardnames [7] = "7";
cardnames [8] = "8";
cardnames [9] = "9";
cardnames [10] = "1";  // add 0 later 
cardnames [11] = "J";
cardnames [12] = "Q";
cardnames [13] = "K";

// commence the games! 
var continue : like true;

somebodyplays (continue);

repeat while continue
    shuffle;
    playing (continue);

    repeat while continue
        deal;

        repeat while not playerstops
            player;
        end;

        repeat while not dealerstops
            dealer;
        end;

        playing (continue);
    end;

    somebodyplays (continue);
end;
